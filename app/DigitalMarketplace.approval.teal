#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 4
    bytecblock "asset_id" "unitary_price"
    // app.py:11
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@11
    pushbytess 0x878cbb3d 0xcc760037 0x1574535a 0x790bf59f 0x33b3499e // method "create_application(asset,uint64)void", method "set_price(uint64)void", method "opt_in_to_asset(pay)void", method "buy(pay,uint64)void", method "delete_application()void"
    txna ApplicationArgs 0
    match main_create_application_route@3 main_set_price_route@4 main_opt_in_to_asset_route@5 main_buy_route@6 main_delete_application_route@7

main_after_if_else@11:
    // app.py:11
    // class DigitalMarketplace(arc4.ARC4Contract):
    intc_0 // 0
    return

main_delete_application_route@7:
    // app.py:62
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_application
    intc_1 // 1
    return

main_buy_route@6:
    // app.py:44
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // app.py:11
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // app.py:44
    // @arc4.abimethod
    callsub buy
    intc_1 // 1
    return

main_opt_in_to_asset_route@5:
    // app.py:28-30
    // # Before any account can receive an asset, it must opt-in to it
    // # This method enables the application to opt-in to the asset
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // app.py:11
    // class DigitalMarketplace(arc4.ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // app.py:28-30
    // # Before any account can receive an asset, it must opt-in to it
    // # This method enables the application to opt-in to the asset
    // @arc4.abimethod
    callsub opt_in_to_asset
    intc_1 // 1
    return

main_set_price_route@4:
    // app.py:23
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // app.py:11
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // app.py:23
    // @arc4.abimethod
    callsub set_price
    intc_1 // 1
    return

main_create_application_route@3:
    // app.py:14
    // @arc4.abimethod(allow_actions=["NoOp"],create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // app.py:11
    // class DigitalMarketplace(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // app.py:14
    // @arc4.abimethod(allow_actions=["NoOp"],create="require")
    callsub create_application
    intc_1 // 1
    return


// app.DigitalMarketplace.create_application(asset_id: uint64, unitary_price: uint64) -> void:
create_application:
    // app.py:14-19
    // @arc4.abimethod(allow_actions=["NoOp"],create="require")
    //     # There are certain actions that a contract call can do
    //     # Some examples are UpdateApplication, DeleteApplication, and NoOp
    //     # NoOp is a call that does nothing special after it is executed
    //     # Require that this method is only callable when creating the app
    // def create_application(self, asset_id: Asset, unitary_price: UInt64) -> None:
    proto 2 0
    // app.py:20
    // self.asset_id = asset_id.id # The ID of the asset we're selling
    bytec_0 // "asset_id"
    frame_dig -2
    app_global_put
    // app.py:21
    // self.unitary_price = unitary_price # The initial sale price
    bytec_1 // "unitary_price"
    frame_dig -1
    app_global_put
    retsub


// app.DigitalMarketplace.set_price(unitary_price: uint64) -> void:
set_price:
    // app.py:23-24
    // @arc4.abimethod
    // def set_price(self, unitary_price: UInt64) -> None:
    proto 1 0
    // app.py:25
    // assert Txn.sender == Global.creator_address # We don't want anyone to be able to modify the price, only the app creator can
    txn Sender
    global CreatorAddress
    ==
    assert
    // app.py:26
    // self.unitary_price = unitary_price
    bytec_1 // "unitary_price"
    frame_dig -1
    app_global_put
    retsub


// app.DigitalMarketplace.opt_in_to_asset(mbr_pay: uint64) -> void:
opt_in_to_asset:
    // app.py:28-31
    // # Before any account can receive an asset, it must opt-in to it
    // # This method enables the application to opt-in to the asset
    // @arc4.abimethod
    // def opt_in_to_asset(self, mbr_pay: gtxn.PaymentTransaction) -> None: # Need to send a payment to cover data usage
    proto 1 0
    // app.py:32-33
    // # We want to make sure that the application address is not already opted in
    // assert not Global.current_application_address.is_opted_in(Asset(self.asset_id))
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_0 // "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // app.py:34
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // app.py:35-37
    // # Every accounts has an MBR of 0.1 ALGO (Global.min_balance)
    // # Opting into an asset increases the MBR by 0.1 ALGO (Global.asset_opt_in_min_balance)
    // assert mbr_pay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // app.py:38-42
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // app.py:39
    // xfer_asset=self.asset_id,
    intc_0 // 0
    bytec_0 // "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    // app.py:40
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // app.py:41
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // app.py:38
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // app.py:38-42
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// app.DigitalMarketplace.buy(buyer_txn: uint64, quantity: uint64) -> void:
buy:
    // app.py:44-45
    // @arc4.abimethod
    // def buy(self, buyer_txn: gtxn.PaymentTransaction, quantity: UInt64) -> None:
    proto 2 0
    // app.py:49-51
    // # We need to verify that the payment is being sent to the application
    // # and is enough to cover the cost of the asset
    // assert buyer_txn.sender == Txn.sender
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert
    // app.py:52
    // assert buyer_txn.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // app.py:53
    // assert buyer_txn.amount == self.unitary_price * quantity
    frame_dig -2
    gtxns Amount
    intc_0 // 0
    bytec_1 // "unitary_price"
    app_global_get_ex
    assert // check self.unitary_price exists
    frame_dig -1
    *
    ==
    assert
    // app.py:55-60
    // # Once we've verified the payment, we can transfer the asset
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_begin
    // app.py:57
    // xfer_asset=self.asset_id,
    intc_0 // 0
    bytec_0 // "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    // app.py:58
    // asset_receiver=Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // app.py:55-56
    // # Once we've verified the payment, we can transfer the asset
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // app.py:55-60
    // # Once we've verified the payment, we can transfer the asset
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_submit
    retsub


// app.DigitalMarketplace.delete_application() -> void:
delete_application:
    // app.py:64
    // assert Txn.sender == Global.creator_address # Send all the unsold assets to the creator
    txn Sender
    global CreatorAddress
    ==
    assert
    // app.py:65-71
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     # Close the asset to unlock the 0.1 ALGO that was locked in opt_in_to_asset
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_begin
    // app.py:66
    // xfer_asset=self.asset_id,
    intc_0 // 0
    bytec_0 // "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    // app.py:67
    // asset_receiver=Global.creator_address,
    global CreatorAddress
    // app.py:69-70
    // # Close the asset to unlock the 0.1 ALGO that was locked in opt_in_to_asset
    // asset_close_to=Global.creator_address,
    dup
    itxn_field AssetCloseTo
    // app.py:68
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // app.py:65
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // app.py:65-71
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     # Close the asset to unlock the 0.1 ALGO that was locked in opt_in_to_asset
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_submit
    // app.py:72
    // itxn.Payment(receiver=Global.creator_address, amount=0, close_remainder_to=Global.creator_address).submit()
    itxn_begin
    global CreatorAddress
    dup
    itxn_field CloseRemainderTo
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub
